const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

class WhatsAppBot {
  constructor() {
    this.client = new Client({
      authStrategy: new LocalAuth(),
      puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      }
    });
    
    this.setupEventListeners();
  }

  setupEventListeners() {
    // Generate QR Code for authentication
    this.client.on('qr', (qr) => {
      console.log('ЁЯУ▒ WhatsApp QR Code:');
      qrcode.generate(qr, { small: true });
    });

    // Bot is ready
    this.client.on('ready', () => {
      console.log('тЬЕ WhatsApp bot is ready!');
    });

    // Handle incoming messages
    this.client.on('message', async (message) => {
      await this.handleMessage(message);
    });
  }

  async handleMessage(message) {
    const userMessage = message.body.toLowerCase().trim();
    const chatId = message.from;
    
    console.log(`ЁЯУй Received: "${userMessage}" from ${chatId}`);
    
    // Bot responses based on user input
    if (userMessage === 'hi' || userMessage === 'hello' || userMessage === 'рд╢рд┐рдХрд╛рдпрдд') {
      await this.sendWelcomeMessage(chatId);
    } else if (userMessage === '1') {
      await this.startComplaintSubmission(chatId);
    } else if (userMessage === '2') {
      await this.startComplaintTracking(chatId);
    } else {
      await this.handleComplaintInput(chatId, userMessage);
    }
  }

  async sendWelcomeMessage(chatId) {
    const welcomeMessage = `
ЁЯПЫя╕П *Welcome to Grievance Redressal System*
рдирдорд╕реНрддреЗ! рд╢рд┐рдХрд╛рдпрдд рдирд┐рд╡рд╛рд░рдг рд╕рд┐рд╕реНрдЯрдо рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ

Please choose an option:
рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:

1я╕ПтГг Submit New Complaint (рдирдИ рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ)
2я╕ПтГг Track Existing Complaint (рдореМрдЬреВрджрд╛ рд╢рд┐рдХрд╛рдпрдд рдЯреНрд░реИрдХ рдХрд░реЗрдВ)

Type the number of your choice.
рдЕрдкрдиреА рдкрд╕рдВрдж рдХрд╛ рдирдВрдмрд░ рдЯрд╛рдЗрдк рдХрд░реЗрдВред
    `;
    
    await this.client.sendMessage(chatId, welcomeMessage);
  }

  async startComplaintSubmission(chatId) {
    const message = `
ЁЯУЭ *Submit New Complaint*
рдирдИ рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ

Let's start with your details:
рдЖрдЗрдП рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВ:

Please provide your full name:
рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреВрд░рд╛ рдирд╛рдо рдмрддрд╛рдПрдВ:
    `;
    
    await this.client.sendMessage(chatId, message);
    // Store user state for complaint submission flow
    this.setUserState(chatId, 'awaiting_name');
  }

  async startComplaintTracking(chatId) {
    const message = `
ЁЯФН *Track Your Complaint*
рдЕрдкрдиреА рд╢рд┐рдХрд╛рдпрдд рдЯреНрд░реИрдХ рдХрд░реЗрдВ

Please enter your Ticket ID:
рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЯрд┐рдХрдЯ рдЖрдИрдбреА рджрд░реНрдЬ рдХрд░реЗрдВ:

Example: RHT123456ABCD
рдЙрджрд╛рд╣рд░рдг: RHT123456ABCD
    `;
    
    await this.client.sendMessage(chatId, message);
    this.setUserState(chatId, 'awaiting_ticket_id');
  }

  async handleComplaintInput(chatId, input) {
    const userState = this.getUserState(chatId);
    
    switch (userState) {
      case 'awaiting_name':
        await this.handleNameInput(chatId, input);
        break;
      case 'awaiting_ticket_id':
        await this.handleTicketTracking(chatId, input);
        break;
      // Add more states as needed
      default:
        await this.sendHelpMessage(chatId);
    }
  }

  async handleNameInput(chatId, name) {
    // Store name and ask for next detail
    this.setUserData(chatId, 'name', name);
    
    const message = `
тЬЕ Name saved: ${name}
рдирд╛рдо рд╕реЗрд╡ рдХрд┐рдпрд╛ рдЧрдпрд╛: ${name}

Now, please provide your phone number:
рдЕрдм, рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдлреЛрди рдирдВрдмрд░ рдмрддрд╛рдПрдВ:
    `;
    
    await this.client.sendMessage(chatId, message);
    this.setUserState(chatId, 'awaiting_phone');
  }

  async handleTicketTracking(chatId, ticketId) {
    try {
      // Call your existing API to track complaint
      const response = await fetch(`http://localhost:5000/api/complaints/track/${ticketId}`);
      const data = await response.json();
      
      if (data.success) {
        const complaint = data.data;
        const statusMessage = `
ЁЯОл *Complaint Details*
рд╢рд┐рдХрд╛рдпрдд рд╡рд┐рд╡рд░рдг

ЁЯУЛ Ticket ID: ${complaint.id}
ЁЯСд Name: ${complaint.name}
ЁЯПв Department: ${complaint.department}
ЁЯПШя╕П Ward: ${complaint.ward}
ЁЯУК Status: ${this.getStatusInHindi(complaint.status)}
ЁЯУЕ Submitted: ${new Date(complaint.submittedAt).toLocaleDateString('hi-IN')}

Your complaint is being processed.
рдЖрдкрдХреА рд╢рд┐рдХрд╛рдпрдд рдкрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИред
        `;
        
        await this.client.sendMessage(chatId, statusMessage);
      } else {
        await this.client.sendMessage(chatId, 'тЭМ Ticket ID not found. Please check and try again.\nрдЯрд┐рдХрдЯ рдЖрдИрдбреА рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдЬрд╛рдВрдЪрдХрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
      }
    } catch (error) {
      console.error('Error tracking complaint:', error);
      await this.client.sendMessage(chatId, 'тЭМ Error tracking complaint. Please try again later.\nрд╢рд┐рдХрд╛рдпрдд рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
    }
  }

  async sendHelpMessage(chatId) {
    const helpMessage = `
тЭУ *Need Help?*
рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП?

Type "hi" to start over.
рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП "hi" рдЯрд╛рдЗрдк рдХрд░реЗрдВред

Or contact support: +91-1262-XXX-XXX
рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ: +91-1262-XXX-XXX
    `;
    
    await this.client.sendMessage(chatId, helpMessage);
  }

  getStatusInHindi(status) {
    const statusMap = {
      'received': 'рдкреНрд░рд╛рдкреНрдд (Received)',
      'in_progress': 'рдкреНрд░рдЧрддрд┐ рдореЗрдВ (In Progress)', 
      'resolved': 'рд╣рд▓ рд╣реЛ рдЧрдпрд╛ (Resolved)'
    };
    return statusMap[status] || status;
  }

  // Simple in-memory state management (use Redis in production)
  setUserState(chatId, state) {
    if (!this.userStates) this.userStates = {};
    this.userStates[chatId] = state;
  }

  getUserState(chatId) {
    return this.userStates?.[chatId] || null;
  }

  setUserData(chatId, key, value) {
    if (!this.userData) this.userData = {};
    if (!this.userData[chatId]) this.userData[chatId] = {};
    this.userData[chatId][key] = value;
  }

  getUserData(chatId, key) {
    return this.userData?.[chatId]?.[key] || null;
  }

  async start() {
    await this.client.initialize();
  }

  async stop() {
    await this.client.destroy();
  }
}

module.exports = WhatsAppBot;
