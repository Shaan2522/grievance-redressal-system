const whatsappService = require('../services/whatsappService');
const Complaint = require('../models/Complaint');
const { generateTicketId } = require('../utils/ticketGenerator');

class WhatsAppController {
  constructor() {
    this.userSessions = new Map(); // Store user conversation state
  }

  async handleWebhook(req, res) {
    try {
      const { Body, From, ProfileName } = req.body;
      const phoneNumber = From.replace('whatsapp:', '');
      const message = Body.trim().toLowerCase();

      console.log(`WhatsApp message from ${phoneNumber}: ${Body}`);

      await this.processMessage(phoneNumber, message, ProfileName);
      
      res.status(200).send('OK');
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(500).send('Error processing message');
    }
  }

  async processMessage(phoneNumber, message, profileName) {
    const session = this.getSession(phoneNumber);

    // Command routing
    if (message.includes('menu') || message.includes('help') || message === 'hi' || message === 'hello') {
      await this.sendMainMenu(phoneNumber, profileName);
    } else if (message === '1' || message.includes('submit') || message.includes('complaint')) {
      await this.startComplaintFlow(phoneNumber);
    } else if (message === '2' || message.includes('track') || message.includes('status')) {
      await this.startTrackingFlow(phoneNumber);
    } else if (session.state === 'awaiting_ticket_id') {
      await this.handleTrackingRequest(phoneNumber, message);
    } else if (session.state === 'complaint_flow') {
      await this.handleComplaintFlow(phoneNumber, message, session);
    } else {
      await this.sendMainMenu(phoneNumber, profileName);
    }
  }

  async sendMainMenu(phoneNumber, profileName = '') {
    const greeting = profileName ? `Hello ${profileName}!` : 'Hello!';
    const menuMessage = `${greeting} ЁЯЩП

Welcome to Grievance Redressal System
рд╢рд┐рдХрд╛рдпрдд рдирд┐рд╡рд╛рд░рдг рдкреНрд░рдгрд╛рд▓реА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ

Please select an option:
рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:

1я╕ПтГг Submit New Complaint
   рдирдИ рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ

2я╕ПтГг Track Complaint Status  
   рд╢рд┐рдХрд╛рдпрдд рдХреА рд╕реНрдерд┐рддрд┐ рджреЗрдЦреЗрдВ

Reply with the number or type your choice.
рд╕рдВрдЦреНрдпрд╛ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВ рдпрд╛ рдЕрдкрдиреА рдкрд╕рдВрдж рдЯрд╛рдЗрдк рдХрд░реЗрдВред

Type "menu" anytime to see options again.`;

    await whatsappService.sendMessage(phoneNumber, menuMessage);
    this.clearSession(phoneNumber);
  }

  async startComplaintFlow(phoneNumber) {
    const session = this.getSession(phoneNumber);
    session.state = 'complaint_flow';
    session.step = 'name';
    session.complaint = {};

    const message = `ЁЯУЭ Let's submit your complaint
рдЖрдЗрдП рдЖрдкрдХреА рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ

Please provide the following information:

Step 1/7: Your Full Name
рдЪрд░рдг 1/7: рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдирд╛рдо

Please enter your name:`;

    await whatsappService.sendMessage(phoneNumber, message);
  }

  async handleComplaintFlow(phoneNumber, message, session) {
    const { step, complaint } = session;

    switch (step) {
      case 'name':
        complaint.name = message;
        session.step = 'phone';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 2/7: Phone Number\nрдЪрд░рдг 2/7: рдлрд╝реЛрди рдирдВрдмрд░\n\nPlease enter your 10-digit phone number:`);
        break;

      case 'phone':
        if (!/^\d{10}$/.test(message)) {
          await whatsappService.sendMessage(phoneNumber, 
            'Please enter a valid 10-digit phone number:\nрдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз 10-рдЕрдВрдХреАрдп рдлрд╝реЛрди рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ:');
          return;
        }
        complaint.phone = message;
        session.step = 'ward';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 3/7: Ward Selection\nрдЪрд░рдг 3/7: рд╡рд╛рд░реНрдб рдЪреБрдиреЗрдВ\n\nPlease select your ward (1-10):\nрдЕрдкрдирд╛ рд╡рд╛рд░реНрдб рдЪреБрдиреЗрдВ (1-10):\n\nExample: Ward 1, Ward 2, etc.`);
        break;

      case 'ward':
        if (!message.includes('ward') && !/^[1-9]|10$/.test(message)) {
          await whatsappService.sendMessage(phoneNumber, 
            'Please enter a valid ward (1-10) or "Ward 1", "Ward 2", etc.');
          return;
        }
        complaint.ward = message.includes('ward') ? message : `Ward ${message}`;
        session.step = 'department';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 4/7: Department\nрдЪрд░рдг 4/7: рд╡рд┐рднрд╛рдЧ\n\nSelect department:\n1. Water Supply\n2. Sanitation\n3. Road\n4. Electricity\n5. Health\n6. Education\n7. Others\n\nReply with number or department name:`);
        break;

      case 'department':
        const departments = {
          '1': 'Water Supply',
          '2': 'Sanitation', 
          '3': 'Road',
          '4': 'Electricity',
          '5': 'Health',
          '6': 'Education',
          '7': 'Others'
        };
        complaint.department = departments[message] || message;
        session.step = 'type';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 5/7: Complaint Type\nрдЪрд░рдг 5/7: рд╢рд┐рдХрд╛рдпрдд рдХрд╛ рдкреНрд░рдХрд╛рд░\n\nBriefly describe the type of issue:\nрд╕рдорд╕реНрдпрд╛ рдХреЗ рдкреНрд░рдХрд╛рд░ рдХрд╛ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд░реНрдгрди рдХрд░реЗрдВ:\n\nExample: Water leakage, Road repair, etc.`);
        break;

      case 'type':
        complaint.complaintType = message;
        session.step = 'address';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 6/7: Address\nрдЪрд░рдг 6/7: рдкрддрд╛\n\nPlease provide the complete address where the issue is located:\nрдХреГрдкрдпрд╛ рдЙрд╕ рдкреВрд░реЗ рдкрддреЗ рдХреЛ рдмрддрд╛рдПрдВ рдЬрд╣рд╛рдВ рд╕рдорд╕реНрдпрд╛ рд╣реИ:`);
        break;

      case 'address':
        complaint.address = message;
        session.step = 'description';
        await whatsappService.sendMessage(phoneNumber, 
          `Step 7/7: Description\nрдЪрд░рдг 7/7: рд╡рд┐рд╡рд░рдг\n\nPlease describe your complaint in detail:\nрдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╢рд┐рдХрд╛рдпрдд рдХрд╛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рджреЗрдВ:`);
        break;

      case 'description':
        complaint.description = message;
        await this.submitComplaint(phoneNumber, complaint);
        break;
    }
  }

  async submitComplaint(phoneNumber, complaintData) {
    try {
      const ticketId = generateTicketId();
      
      const complaint = new Complaint({
        ticketId,
        citizenInfo: {
          name: complaintData.name,
          phone: complaintData.phone,
          email: '' // Optional via WhatsApp
        },
        complaintDetails: {
          department: complaintData.department,
          ward: complaintData.ward,
          type: complaintData.complaintType,
          description: complaintData.description,
          address: complaintData.address,
          priority: 'medium'
        },
        statusHistory: [{
          status: 'received',
          updatedBy: 'WhatsApp Bot',
          message: 'Complaint received via WhatsApp',
          timestamp: new Date()
        }]
      });

      await complaint.save();

      const successMessage = `тЬЕ Complaint Submitted Successfully!
рд╢рд┐рдХрд╛рдпрдд рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрдЬ рдХреА рдЧрдИ!

ЁЯУЛ Your Ticket ID: *${ticketId}*
рдЖрдкрдХреА рдЯрд┐рдХрдЯ рдЖрдИрдбреА: *${ticketId}*

ЁЯУЭ Summary:
ЁЯУЮ Phone: ${complaintData.phone}
ЁЯПв Department: ${complaintData.department}
ЁЯПШя╕П Ward: ${complaintData.ward}
ЁЯУН Address: ${complaintData.address}
ЁЯУД Type: ${complaintData.complaintType}

тП▒я╕П Status: Complaint Received
рд╕реНрдерд┐рддрд┐: рд╢рд┐рдХрд╛рдпрдд рдкреНрд░рд╛рдкреНрдд

ЁЯХР Estimated Resolution: 7 days
рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдорд╛рдзрд╛рди: 7 рджрд┐рди

ЁЯТб Save this Ticket ID to track your complaint status.
рдЕрдкрдиреА рд╢рд┐рдХрд╛рдпрдд рдХреА рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕ рдЯрд┐рдХрдЯ рдЖрдИрдбреА рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВред

Type "menu" for more options.`;

      await whatsappService.sendMessage(phoneNumber, successMessage);
      this.clearSession(phoneNumber);

    } catch (error) {
      console.error('Error submitting complaint:', error);
      await whatsappService.sendMessage(phoneNumber, 
        `тЭМ Error submitting complaint. Please try again or contact support.\nрд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред\n\nType "menu" to start over.`);
      this.clearSession(phoneNumber);
    }
  }

  async startTrackingFlow(phoneNumber) {
    const session = this.getSession(phoneNumber);
    session.state = 'awaiting_ticket_id';

    const message = `ЁЯФН Track Your Complaint
рдЕрдкрдиреА рд╢рд┐рдХрд╛рдпрдд рдЯреНрд░реИрдХ рдХрд░реЗрдВ

Please enter your Ticket ID:
рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЯрд┐рдХрдЯ рдЖрдИрдбреА рджрд░реНрдЬ рдХрд░реЗрдВ:

Example: RHT123456ABCD
рдЙрджрд╛рд╣рд░рдг: RHT123456ABCD`;

    await whatsappService.sendMessage(phoneNumber, message);
  }

  async handleTrackingRequest(phoneNumber, ticketId) {
    try {
      const complaint = await Complaint.findOne({ ticketId: ticketId.toUpperCase() });

      if (!complaint) {
        await whatsappService.sendMessage(phoneNumber, 
          `тЭМ Complaint not found with Ticket ID: ${ticketId}\nрдЯрд┐рдХрдЯ рдЖрдИрдбреА рдХреЗ рд╕рд╛рде рд╢рд┐рдХрд╛рдпрдд рдирд╣реАрдВ рдорд┐рд▓реА: ${ticketId}\n\nPlease check your Ticket ID and try again.\nType "menu" for more options.`);
        this.clearSession(phoneNumber);
        return;
      }

      const statusLabels = {
        'received': 'Complaint Received / рд╢рд┐рдХрд╛рдпрдд рдкреНрд░рд╛рдкреНрдд',
        'in_progress': 'Active / рдкреНрд░рдЧрддрд┐ рдореЗрдВ',
        'resolved': 'Resolved / рд╣рд▓ рд╣реЛ рдЧрдпрд╛'
      };

      const statusMessage = `ЁЯУЛ Complaint Status / рд╢рд┐рдХрд╛рдпрдд рдХреА рд╕реНрдерд┐рддрд┐

ЁЯОл Ticket ID: *${complaint.ticketId}*
ЁЯСд Name: ${complaint.citizenInfo.name}
ЁЯПв Department: ${complaint.complaintDetails.department}
ЁЯПШя╕П Ward: ${complaint.complaintDetails.ward}
ЁЯУД Type: ${complaint.complaintDetails.type}

ЁЯУК Current Status: *${statusLabels[complaint.status]}*
рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐: *${statusLabels[complaint.status]}*

ЁЯУЕ Submitted: ${new Date(complaint.timestamps.submitted).toLocaleDateString('en-IN')}
рджрд░реНрдЬ рдХрд┐рдпрд╛ рдЧрдпрд╛: ${new Date(complaint.timestamps.submitted).toLocaleDateString('hi-IN')}

тП▒я╕П Estimated Resolution: ${complaint.estimatedResolution}
рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдорд╛рдзрд╛рди: ${complaint.estimatedResolution}

ЁЯУН Address: ${complaint.complaintDetails.address}
ЁЯУЭ Description: ${complaint.complaintDetails.description}

Type "menu" for more options.`;

      await whatsappService.sendMessage(phoneNumber, statusMessage);
      this.clearSession(phoneNumber);

    } catch (error) {
      console.error('Error tracking complaint:', error);
      await whatsappService.sendMessage(phoneNumber, 
        `тЭМ Error retrieving complaint details. Please try again.\nрд╢рд┐рдХрд╛рдпрдд рд╡рд┐рд╡рд░рдг рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред\n\nType "menu" to start over.`);
      this.clearSession(phoneNumber);
    }
  }

  getSession(phoneNumber) {
    if (!this.userSessions.has(phoneNumber)) {
      this.userSessions.set(phoneNumber, { state: null, step: null });
    }
    return this.userSessions.get(phoneNumber);
  }

  clearSession(phoneNumber) {
    this.userSessions.delete(phoneNumber);
  }
}

module.exports = new WhatsAppController();
